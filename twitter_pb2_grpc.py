# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import twitter_pb2 as twitter__pb2


class TwitterServiceStub(object):
    """The Twitter service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTimeline = channel.unary_unary(
                '/twitter.TwitterService/GetTimeline',
                request_serializer=twitter__pb2.GetTimelineRequest.SerializeToString,
                response_deserializer=twitter__pb2.GetTimelineResponse.FromString,
                )
        self.PostTweet = channel.unary_unary(
                '/twitter.TwitterService/PostTweet',
                request_serializer=twitter__pb2.PostTweetRequest.SerializeToString,
                response_deserializer=twitter__pb2.PostTweetResponse.FromString,
                )
        self.FollowUser = channel.unary_unary(
                '/twitter.TwitterService/FollowUser',
                request_serializer=twitter__pb2.FollowUserRequest.SerializeToString,
                response_deserializer=twitter__pb2.FollowUserResponse.FromString,
                )


class TwitterServiceServicer(object):
    """The Twitter service definition
    """

    def GetTimeline(self, request, context):
        """Returns the timeline for the specified user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostTweet(self, request, context):
        """Posts a tweet on behalf of the specified user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FollowUser(self, request, context):
        """Makes the specified user follow another user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TwitterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTimeline': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTimeline,
                    request_deserializer=twitter__pb2.GetTimelineRequest.FromString,
                    response_serializer=twitter__pb2.GetTimelineResponse.SerializeToString,
            ),
            'PostTweet': grpc.unary_unary_rpc_method_handler(
                    servicer.PostTweet,
                    request_deserializer=twitter__pb2.PostTweetRequest.FromString,
                    response_serializer=twitter__pb2.PostTweetResponse.SerializeToString,
            ),
            'FollowUser': grpc.unary_unary_rpc_method_handler(
                    servicer.FollowUser,
                    request_deserializer=twitter__pb2.FollowUserRequest.FromString,
                    response_serializer=twitter__pb2.FollowUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twitter.TwitterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TwitterService(object):
    """The Twitter service definition
    """

    @staticmethod
    def GetTimeline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/twitter.TwitterService/GetTimeline',
            twitter__pb2.GetTimelineRequest.SerializeToString,
            twitter__pb2.GetTimelineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PostTweet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/twitter.TwitterService/PostTweet',
            twitter__pb2.PostTweetRequest.SerializeToString,
            twitter__pb2.PostTweetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FollowUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/twitter.TwitterService/FollowUser',
            twitter__pb2.FollowUserRequest.SerializeToString,
            twitter__pb2.FollowUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
